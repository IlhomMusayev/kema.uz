{"version":3,"file":"index.cjs.js","sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/utils/isWeb.ts","../src/utils/isProxyEnabled.ts","../src/useFormState.ts","../src/useController.ts","../src/logic/getControllerValue.ts","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFieldsValues.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/deepMerge.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/isString.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/utils/isFileInput.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/logic/getResolverOptions.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/utils/getValidationModes.ts","../src/utils/isHTMLElement.ts","../src/utils/Subject.ts","../src/useForm.ts","../src/controller.tsx","../src/useFieldArray.ts","../src/logic/hasValidation.ts","../src/logic/skipValidation.ts","../src/utils/isRadioOrCheckbox.ts","../src/useWatch.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n    Object.keys(formState).find(\n      (key) =>\n        readFormStateRef[key as keyof ReadFormState] ===\n        (isRoot ? VALIDATION_MODE.all : true),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== 'undefined';\n\nexport default isProxyEnabled;\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const { control, name } = props || {};\n  const methods = useFormContext();\n  const { formStateRef, subjectsRef, readFormStateRef } =\n    control || methods.control;\n  const nameRef = React.useRef<InternalFieldName>(name as InternalFieldName);\n  nameRef.current = name as InternalFieldName;\n\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next: (formState) =>\n        (!nameRef.current ||\n          !formState.name ||\n          convertToArrayPayload(nameRef.current).includes(formState.name)) &&\n        shouldRenderFormState(formState, readFormState.current) &&\n        updateFormState({\n          ...formStateRef.current,\n          ...formState,\n        }),\n    });\n\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n\n  return getProxyFormState<TFieldValues>(\n    isProxyEnabled,\n    formState as FormState<TFieldValues>,\n    readFormStateRef,\n    readFormState,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport isUndefined from './utils/isUndefined';\nimport { EVENTS } from './constants';\nimport {\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  shouldUnregister,\n}: UseControllerProps<TFieldValues, TName>): UseControllerReturn<\n  TFieldValues,\n  TName\n> {\n  const methods = useFormContext<TFieldValues>();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    unregister,\n    namesRef,\n    subjectsRef,\n    shouldUnmount,\n    inFieldArrayActionRef,\n  } = control || methods.control;\n\n  const isFieldArray = isNameInFieldArray(namesRef.current.array, name);\n  const field = get(fieldsRef.current, name);\n  const [value, setInputStateValue] = React.useState(\n    isFieldArray || !field || !field._f\n      ? isFieldArray || isUndefined(get(defaultValuesRef.current, name))\n        ? defaultValue\n        : get(defaultValuesRef.current, name)\n      : field._f.value,\n  );\n  const { onChange, onBlur, ref } = register(name, {\n    ...rules,\n    value,\n  });\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n\n  React.useEffect(() => {\n    const controllerSubscription = subjectsRef.current.control.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n\n    return () => {\n      controllerSubscription.unsubscribe();\n      const shouldUnmountField = shouldUnmount || shouldUnregister;\n\n      if (\n        isFieldArray\n          ? shouldUnmountField && !inFieldArrayActionRef.current\n          : shouldUnmountField\n      ) {\n        unregister(name);\n      } else if (field && field._f) {\n        field._f.mount = false;\n      }\n    };\n  }, [name]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => elm && ref(elm),\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  output: FieldValues = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f && _f.ref\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      current &&\n        getFieldsValues(\n          {\n            current,\n          },\n          output[name],\n        );\n    }\n  }\n\n  return output;\n};\n\nexport default getFieldsValues;\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): any =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: (value && value[keyName]) || generateId(),\n    ...value,\n  }));\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...data, ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...data];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n  criteriaMode?: CriteriaMode,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n  };\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n      mount,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n): Promise<InternalFieldErrors> => {\n  if (!mount) {\n    return {};\n  }\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? (refs || [])[0] || {} : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (\n    (!isNullOrUndefined(min) || !isNullOrUndefined(max)) &&\n    inputValue !== ''\n  ) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const validateRef = isRadioOrCheckbox && refs ? refs[0] : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(inputValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getFieldValueAs from './logic/getFieldValueAs';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport getResolverOptions from './logic/getResolverOptions';\nimport hasValidation from './logic/hasValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const resolverRef = React.useRef(resolver);\n  const formStateRef = React.useRef(formState);\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const defaultValuesRef =\n    React.useRef<DefaultValues<TFieldValues>>(defaultValues);\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const contextRef = React.useRef(context);\n  const inFieldArrayActionRef = React.useRef(false);\n  const isMountedRef = React.useRef(false);\n  const subjectsRef: Subjects<TFieldValues> = React.useRef({\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  });\n  const namesRef = React.useRef<Names>({\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n    watchAll: false,\n  });\n\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  resolverRef.current = resolver;\n  contextRef.current = context;\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    namesRef.current.watchAll ||\n    namesRef.current.watch.has(name) ||\n    namesRef.current.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const shouldRenderBaseOnError = React.useCallback(\n    async (\n      shouldSkipRender: boolean,\n      name: InternalFieldName,\n      error?: FieldError,\n      inputState?: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      },\n      isValidFromResolver?: boolean,\n      isWatched?: boolean,\n    ): Promise<void> => {\n      const previousError = get(formStateRef.current.errors, name);\n      const isValid = readFormStateRef.current.isValid\n        ? resolver\n          ? isValidFromResolver\n          : await validateForm(fieldsRef.current, true)\n        : false;\n\n      error\n        ? set(formStateRef.current.errors, name, error)\n        : unset(formStateRef.current.errors, name);\n\n      if (\n        (isWatched ||\n          (error ? !deepEqual(previousError, error, true) : previousError) ||\n          !isEmptyObject(inputState) ||\n          formStateRef.current.isValid !== isValid) &&\n        !shouldSkipRender\n      ) {\n        const updatedFormState = {\n          ...inputState,\n          isValid: !!isValid,\n          errors: formStateRef.current.errors,\n          name,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        subjectsRef.current.state.next(isWatched ? { name } : updatedFormState);\n      }\n\n      subjectsRef.current.state.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const field = get(fieldsRef.current, name);\n\n      if (field) {\n        const _f = (field as Field)._f;\n\n        if (_f) {\n          const value =\n            isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n              ? ''\n              : rawValue;\n          _f.value = getFieldValueAs(rawValue, _f);\n\n          if (isRadioInput(_f.ref)) {\n            (_f.refs || []).forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === value),\n            );\n          } else if (isFileInput(_f.ref) && !isString(value)) {\n            _f.ref.files = value as FileList;\n          } else if (isMultipleSelect(_f.ref)) {\n            [..._f.ref.options].forEach(\n              (selectRef) =>\n                (selectRef.selected = (value as string[]).includes(\n                  selectRef.value,\n                )),\n            );\n          } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(value)\n                      ? !!(value as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : value === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!value);\n          } else {\n            _f.ref.value = value;\n          }\n\n          if (shouldRender) {\n            const values = getFieldsValues(fieldsRef);\n            set(values, name, rawValue);\n            subjectsRef.current.control.next({\n              values: {\n                ...defaultValuesRef.current,\n                ...values,\n              } as DefaultValues<TFieldValues>,\n              name,\n            });\n          }\n\n          (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirtyState(name, value, options.shouldTouch);\n          options.shouldValidate && trigger(name as Path<TFieldValues>);\n        } else {\n          field._f = {\n            ref: {\n              name,\n              value: rawValue,\n            },\n            value: rawValue,\n          };\n        }\n      }\n    },\n    [],\n  );\n\n  const getIsDirty: GetIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n\n    name && data && set(formValues, name, data);\n\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n\n  const updateTouchAndDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      isCurrentTouched?: boolean,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      const state: Partial<FormState<TFieldValues>> & { name: string } = {\n        name,\n      };\n      let isChanged = false;\n\n      if (readFormStateRef.current.isDirty) {\n        const previousIsDirty = formStateRef.current.isDirty;\n        formStateRef.current.isDirty = getIsDirty();\n        state.isDirty = formStateRef.current.isDirty;\n        isChanged = previousIsDirty !== state.isDirty;\n      }\n\n      if (readFormStateRef.current.dirtyFields) {\n        const isPreviousFieldDirty = get(\n          formStateRef.current.dirtyFields,\n          name,\n        );\n        const isCurrentFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        isCurrentFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n        state.dirtyFields = formStateRef.current.dirtyFields;\n        isChanged =\n          isChanged ||\n          isPreviousFieldDirty !== get(formStateRef.current.dirtyFields, name);\n      }\n\n      const isPreviousFieldTouched = get(\n        formStateRef.current.touchedFields,\n        name,\n      );\n\n      if (isCurrentTouched && !isPreviousFieldTouched) {\n        set(formStateRef.current.touchedFields, name, isCurrentTouched);\n        state.touchedFields = formStateRef.current.touchedFields;\n        isChanged =\n          isChanged ||\n          (readFormStateRef.current.touchedFields &&\n            isPreviousFieldTouched !== isCurrentTouched);\n      }\n\n      isChanged && shouldRender && subjectsRef.current.state.next(state);\n\n      return isChanged ? state : {};\n    },\n    [],\n  );\n\n  const executeInlineValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender: boolean,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(skipReRender, name, error);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeResolverValidation = React.useCallback(\n    async (names?: InternalFieldName[]) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef),\n        contextRef.current,\n        getResolverOptions(\n          namesRef.current.mount,\n          fieldsRef.current,\n          criteriaMode,\n        ),\n      );\n\n      if (names) {\n        for (const name of names) {\n          const error = get(errors, name);\n          error\n            ? set(formStateRef.current.errors, name, error)\n            : unset(formStateRef.current.errors, name);\n        }\n      } else {\n        formStateRef.current.errors = errors;\n      }\n\n      return errors;\n    },\n    [criteriaMode],\n  );\n\n  const validateForm = async (\n    fieldsRef: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n          );\n\n          if (shouldCheckValid) {\n            if (fieldError[_f.name]) {\n              context.valid = false;\n              break;\n            }\n          } else {\n            fieldError[_f.name]\n              ? set(formStateRef.current.errors, _f.name, fieldError[_f.name])\n              : unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name, options = {}) => {\n      const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n      let isValid;\n\n      subjectsRef.current.state.next({\n        isValidating: true,\n      });\n\n      if (resolver) {\n        const schemaResult = await executeResolverValidation(\n          isUndefined(name) ? name : fieldNames,\n        );\n        isValid = name\n          ? fieldNames.every((name) => !get(schemaResult, name))\n          : isEmptyObject(schemaResult);\n      } else {\n        isValid = name\n          ? (\n              await Promise.all(\n                fieldNames\n                  .filter((fieldName) => get(fieldsRef.current, fieldName))\n                  .map(\n                    async (fieldName) =>\n                      await executeInlineValidation(fieldName, true),\n                  ),\n              )\n            ).every(Boolean)\n          : await validateForm(fieldsRef.current);\n      }\n\n      subjectsRef.current.state.next({\n        ...(isString(name) ? { name } : {}),\n        errors: formStateRef.current.errors,\n        isValidating: false,\n      });\n\n      if (options.shouldFocus && !isValid) {\n        focusFieldBy(\n          fieldsRef.current,\n          (key) => get(formStateRef.current.errors, key),\n          fieldNames,\n        );\n      }\n\n      readFormStateRef.current.isValid && updateIsValid();\n\n      return isValid;\n    },\n    [executeResolverValidation, executeInlineValidation],\n  );\n\n  const updateIsValidAndInputValue = (name: InternalFieldName, ref?: Ref) => {\n    const field = get(fieldsRef.current, name) as Field;\n\n    if (field) {\n      const isValueUndefined = isUndefined(field._f.value);\n      const defaultValue = isValueUndefined\n        ? get(defaultValuesRef.current, name)\n        : field._f.value;\n\n      if (!isUndefined(defaultValue)) {\n        if (ref && (ref as HTMLInputElement).defaultChecked) {\n          field._f.value = getFieldValue(field);\n        } else if (isNameInFieldArray(namesRef.current.array, name)) {\n          field._f.value = defaultValue;\n        } else {\n          setFieldValue(name, defaultValue);\n        }\n      } else if (isValueUndefined) {\n        field._f.value = getFieldValue(field);\n      }\n    }\n\n    isMountedRef.current && readFormStateRef.current.isValid && updateIsValid();\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const isValid = resolver\n        ? isEmptyObject(\n            (\n              await resolverRef.current!(\n                {\n                  ...getFieldsValues(fieldsRef),\n                  ...values,\n                },\n                contextRef.current,\n                getResolverOptions(\n                  namesRef.current.mount,\n                  fieldsRef.current,\n                  criteriaMode,\n                ),\n              )\n            ).errors,\n          )\n        : await validateForm(fieldsRef.current, true);\n\n      isValid !== formStateRef.current.isValid &&\n        subjectsRef.current.state.next({\n          isValid,\n        });\n    },\n    [criteriaMode],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([inputKey, inputValue]) => {\n        const fieldName = `${name}.${inputKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n        const isFieldArray = namesRef.current.array.has(name);\n\n        isFieldArray || !isPrimitive(inputValue) || (field && !field._f)\n          ? setInternalValues(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = namesRef.current.array.has(name);\n\n    if (isFieldArray) {\n      subjectsRef.current.array.next({\n        values: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        subjectsRef.current.state.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    ((field && !field._f) || isFieldArray) && !isNullOrUndefined(value)\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && subjectsRef.current.state.next({});\n    subjectsRef.current.watch.next({ name, values: getValues() });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n\n        const shouldSkipValidation =\n          (!hasValidation(field._f, field._f.mount) &&\n            !resolver &&\n            !get(formStateRef.current.errors, name)) ||\n          skipValidation({\n            isBlurEvent,\n            isTouched: !!get(formStateRef.current.touchedFields, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            isReValidateOnBlur,\n            isReValidateOnChange,\n            ...validationMode,\n          });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const inputState = updateTouchAndDirtyState(\n          name,\n          field._f.value,\n          isBlurEvent,\n          false,\n        );\n\n        const shouldRender = !isEmptyObject(inputState) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            subjectsRef.current.watch.next({\n              name,\n              type,\n              values: getValues(),\n            });\n          return (\n            shouldRender &&\n            subjectsRef.current.state.next(\n              isWatched ? { name } : { ...inputState, name },\n            )\n          );\n        }\n\n        subjectsRef.current.state.next({\n          isValidating: true,\n        });\n\n        if (resolver) {\n          const { errors } = await resolverRef.current!(\n            getFieldsValues(fieldsRef),\n            contextRef.current,\n            getResolverOptions([name], fieldsRef.current, criteriaMode),\n          );\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n        } else {\n          error = (await validateField(field, isValidateAllFieldCriteria))[\n            name\n          ];\n        }\n\n        !isBlurEvent &&\n          subjectsRef.current.watch.next({\n            name,\n            type,\n            values: getValues(),\n          });\n        shouldRenderBaseOnError(\n          false,\n          name,\n          error,\n          inputState,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...defaultValuesRef.current,\n      ...getFieldsValues(fieldsRef),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(formStateRef.current.errors, inputName),\n        )\n      : (formStateRef.current.errors = {});\n\n    subjectsRef.current.state.next({\n      errors: formStateRef.current.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    subjectsRef.current.state.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal, formValues) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues =\n        formValues || isMountedRef.current\n          ? {\n              ...defaultValuesRef.current,\n              ...(formValues || getFieldsValues(fieldsRef)),\n            }\n          : isUndefined(defaultValue)\n          ? defaultValuesRef.current\n          : isArrayNames\n          ? defaultValue\n          : { [fieldNames as InternalFieldName]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (namesRef.current.watchAll = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of convertToArrayPayload(fieldNames)) {\n        isGlobal && namesRef.current.watch.add(fieldName as InternalFieldName);\n        result.push(get(fieldValues, fieldName as InternalFieldName));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? subjectsRef.current.watch.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? convertToArrayPayload(name)\n      : namesRef.current.mount) {\n      namesRef.current.mount.delete(inputName);\n      namesRef.current.array.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(defaultValuesRef.current, inputName);\n\n        subjectsRef.current.watch.next({\n          name: inputName,\n          values: getValues(),\n        });\n      }\n    }\n\n    subjectsRef.current.state.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getIsDirty() }),\n    });\n    !options.keepIsValid && updateIsValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field = get(fieldsRef.current, name) as Field;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(fieldsRef.current, name, field);\n\n    updateIsValidAndInputValue(name, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options = {}) => {\n      const field = get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(field && field._f ? field._f : { ref: { name } }),\n          name,\n          mount: true,\n          ...options,\n        },\n      });\n      namesRef.current.mount.add(name);\n      !field && updateIsValidAndInputValue(name);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null): void => {\n              if (ref) {\n                registerFieldRef(name, ref, options);\n              } else {\n                const field = get(fieldsRef.current, name, {}) as Field;\n                const shouldUnmount =\n                  shouldUnregister || options.shouldUnregister;\n\n                if (field._f) {\n                  field._f.mount = false;\n                  // If initial state of field element is disabled,\n                  // value is not set on first \"register\"\n                  // re-sync the value in when it switched to enabled\n                  if (isUndefined(field._f.value)) {\n                    field._f.value = field._f.ref.value;\n                  }\n                }\n\n                shouldUnmount &&\n                  !(\n                    isNameInFieldArray(namesRef.current.array, name) &&\n                    inFieldArrayActionRef.current\n                  ) &&\n                  namesRef.current.unMount.add(name);\n              }\n            },\n          };\n    },\n    [],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues = getFieldsValues(fieldsRef);\n\n      subjectsRef.current.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolver) {\n          const { errors, values } = await resolverRef.current!(\n            fieldValues,\n            contextRef.current,\n            getResolverOptions(\n              namesRef.current.mount,\n              fieldsRef.current,\n              criteriaMode,\n            ),\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          subjectsRef.current.state.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key) => get(formStateRef.current.errors, key),\n              namesRef.current.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        subjectsRef.current.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria, criteriaMode],\n  );\n\n  const registerAbsentFields = <T extends DefaultValues<TFieldValues>>(\n    value: T,\n    name = '',\n  ): void => {\n    const field = get(fieldsRef.current, name);\n\n    if (!field || (field && !field._f)) {\n      if (\n        !field &&\n        (isPrimitive(value) ||\n          (isWeb && (value instanceof FileList || value instanceof Date)))\n      ) {\n        register(name as Path<TFieldValues>, { value } as RegisterOptions);\n      }\n\n      if (Array.isArray(value) || isObject(value)) {\n        if (name && !get(fieldsRef.current, name)) {\n          set(fieldsRef.current, name, Array.isArray(value) ? [] : {});\n        }\n\n        for (const key in value) {\n          registerAbsentFields(value[key], name + (name ? '.' : '') + key);\n        }\n      }\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of namesRef.current.mount) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      subjectsRef.current.control.next({\n        values: { ...updatedValues },\n      });\n\n      subjectsRef.current.watch.next({\n        values: { ...updatedValues },\n      });\n\n      subjectsRef.current.array.next({\n        values: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      !shouldUnregister &&\n      registerAbsentFields({ ...updatedValues });\n\n    namesRef.current = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n    };\n\n    subjectsRef.current.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? formStateRef.current.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? formStateRef.current.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(values, defaultValuesRef.current)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? formStateRef.current.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? formStateRef.current.dirtyFields\n        : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? formStateRef.current.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    isMountedRef.current = !!keepStateOptions.keepIsValid;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    !shouldUnregister && registerAbsentFields(defaultValuesRef.current);\n\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          updateFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = subjectsRef.current.array.subscribe({\n      next(state) {\n        if (state.values && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.values);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    return () => {\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const isLiveInDom = (ref: Ref) =>\n      !isHTMLElement(ref) || !document.contains(ref);\n\n    if (!isMountedRef.current) {\n      isMountedRef.current = true;\n      readFormStateRef.current.isValid && updateIsValid();\n    }\n\n    for (const name of namesRef.current.unMount) {\n      const field = get(fieldsRef.current, name) as Field;\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every(isLiveInDom)\n          : isLiveInDom(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    namesRef.current.unMount = new Set();\n  });\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        inFieldArrayActionRef,\n        getIsDirty,\n        subjectsRef,\n        watchInternal,\n        fieldsRef,\n        updateIsValid,\n        namesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n        unregister,\n        shouldUnmount: shouldUnregister,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, []),\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldArrayParentName from './logic/getNodeParentName';\nimport mapIds from './logic/mapId';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport appendAt from './utils/append';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport isPrimitive from './utils/isPrimitive';\nimport isString from './utils/isString';\nimport moveArrayAt from './utils/move';\nimport omit from './utils/omit';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport unset from './utils/unset';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  Path,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n  UseFormRegister,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n  shouldUnregister,\n}: UseFieldArrayProps<\n  TFieldValues,\n  TFieldArrayName,\n  TKeyName\n>): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const focusNameRef = React.useRef('');\n  const isMountedRef = React.useRef(false);\n  const {\n    getIsDirty,\n    namesRef,\n    fieldsRef,\n    defaultValuesRef,\n    formStateRef,\n    subjectsRef,\n    readFormStateRef,\n    updateIsValid,\n    fieldArrayDefaultValuesRef,\n    unregister,\n    shouldUnmount,\n    inFieldArrayActionRef,\n    register,\n  } = control || methods.control;\n\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(\n    mapIds(\n      get(fieldsRef.current, name) && isMountedRef.current\n        ? get(getFieldsValues(fieldsRef), name)\n        : get(fieldArrayDefaultValuesRef.current, getFieldArrayParentName(name))\n        ? get(fieldArrayDefaultValuesRef.current, name, [])\n        : get(defaultValuesRef.current, name, []),\n      keyName,\n    ),\n  );\n\n  set(fieldArrayDefaultValuesRef.current, name, [...fields]);\n  namesRef.current.array.add(name);\n\n  const omitKey = <\n    T extends Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[],\n  >(\n    fields: T,\n  ) =>\n    fields.map((field = {}) => omit(field as Record<TKeyName, any>, keyName));\n\n  const getCurrentFieldsValues = () => {\n    const values = get(getFieldsValues(fieldsRef), name, []);\n\n    return mapIds<TFieldValues, TKeyName>(\n      get(fieldArrayDefaultValuesRef.current, name, []).map(\n        (item: Partial<TFieldValues>, index: number) => ({\n          ...item,\n          ...values[index],\n        }),\n      ),\n      keyName,\n    );\n  };\n\n  const getFocusFieldName = (\n    index: number,\n    options?: FieldArrayMethodProps,\n  ): string =>\n    options && !options.shouldFocus\n      ? options.focusName || `${name}.${options.focusIndex}`\n      : `${name}.${index}`;\n\n  const setFieldsAndNotify = (\n    fieldsValues: Partial<FieldArray<TFieldValues, TFieldArrayName>>[] = [],\n  ) => setFields(mapIds(fieldsValues, keyName));\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const batchStateUpdate = <T extends Function>(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n    },\n    updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = [],\n    shouldSet = true,\n  ) => {\n    inFieldArrayActionRef.current = true;\n    if (get(fieldsRef.current, name)) {\n      const output = method(get(fieldsRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldsRef.current, name, output);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touchedFields &&\n      get(formStateRef.current.touchedFields, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touchedFields, name, output);\n      cleanup(formStateRef.current.touchedFields);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n      updatedFieldArrayValues &&\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            omitKey(updatedFieldArrayValues),\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    subjectsRef.current.state.next({\n      isDirty: getIsDirty(name, omitKey(updatedFieldArrayValues)),\n      errors: formStateRef.current.errors as FieldErrors<TFieldValues>,\n      isValid: formStateRef.current.isValid,\n    });\n  };\n\n  const registerFieldArray = <T extends Object[]>(\n    values: T,\n    index = 0,\n    parentName = '',\n  ) =>\n    values.forEach(\n      (appendValueItem, valueIndex) =>\n        !isPrimitive(appendValueItem) &&\n        Object.entries(appendValueItem).forEach(([key, value]) => {\n          const inputName = `${parentName || name}.${\n            parentName ? valueIndex : index + valueIndex\n          }.${key}`;\n\n          Array.isArray(value)\n            ? registerFieldArray(value, valueIndex, inputName)\n            : (register as UseFormRegister<TFieldValues>)(\n                inputName as Path<TFieldValues>,\n                { value },\n              );\n        }),\n    );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = appendAt(\n      getCurrentFieldsValues(),\n      appendValue,\n    );\n    const currentIndex = updatedFieldArrayValues.length - appendValue.length;\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n      false,\n    );\n    registerFieldArray(appendValue, currentIndex);\n\n    focusNameRef.current = getFocusFieldName(currentIndex, options);\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      prependValue,\n    );\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(prependValue);\n\n    focusNameRef.current = getFocusFieldName(0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(getCurrentFieldsValues(), index);\n\n    setFieldsAndNotify(updatedFieldArrayValues);\n\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = insertAt(\n      getCurrentFieldsValues(),\n      index,\n      insertValue,\n    );\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(insertValue, index);\n\n    focusNameRef.current = getFocusFieldName(index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      fieldValues,\n      false,\n    );\n    setFieldsAndNotify(fieldValues);\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    setFieldsAndNotify(fieldValues);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      fieldValues,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    inFieldArrayActionRef.current = false;\n\n    if (namesRef.current.watchAll) {\n      subjectsRef.current.state.next({});\n    } else {\n      for (const watchField of namesRef.current.watch) {\n        if (name.startsWith(watchField)) {\n          subjectsRef.current.state.next({});\n          break;\n        }\n      }\n    }\n\n    subjectsRef.current.watch.next({\n      name,\n      values: getFieldsValues(fieldsRef),\n    });\n\n    focusNameRef.current &&\n      focusFieldBy(\n        fieldsRef.current,\n        (key: string) => isString(key) && key.startsWith(focusNameRef.current),\n      );\n\n    focusNameRef.current = '';\n\n    subjectsRef.current.array.next({\n      name,\n      values: omitKey([...fields]),\n    });\n\n    readFormStateRef.current.isValid && updateIsValid();\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const fieldArraySubscription = subjectsRef.current.array.subscribe({\n      next({ name: inputFieldArrayName, values, isReset }) {\n        if (isReset) {\n          unset(fieldsRef.current, inputFieldArrayName || name);\n\n          inputFieldArrayName\n            ? set(\n                fieldArrayDefaultValuesRef.current,\n                inputFieldArrayName,\n                values,\n              )\n            : (fieldArrayDefaultValuesRef.current = values);\n\n          setFieldsAndNotify(get(fieldArrayDefaultValuesRef.current, name));\n        }\n      },\n    });\n    !get(fieldsRef.current, name) && set(fieldsRef.current, name, []);\n    isMountedRef.current = true;\n\n    return () => {\n      fieldArraySubscription.unsubscribe();\n      (shouldUnmount || shouldUnregister) &&\n        unregister(name as FieldPath<TFieldValues>);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T, mounted?: boolean) =>\n  mounted &&\n  options &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\n\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartial,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TName;\n  defaultValue?: FieldPathValue<TFieldValues, TName>;\n  control?: Control<TFieldValues>;\n}): FieldPathValue<TFieldValues, TName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: TName;\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): FieldPathValues<TFieldValues, TName>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const { control, name, defaultValue } = props || {};\n  const methods = useFormContext();\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n\n  const { watchInternal, subjectsRef } = control || methods.control;\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? watchInternal(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    watchInternal(name as InternalFieldName);\n\n    const watchSubscription = subjectsRef.current.watch.subscribe({\n      next: ({ name: inputName, values }) =>\n        (!nameRef.current ||\n          !inputName ||\n          convertToArrayPayload(nameRef.current).some(\n            (fieldName) =>\n              inputName &&\n              fieldName &&\n              (fieldName.startsWith(inputName as InternalFieldName) ||\n                inputName.startsWith(fieldName as InternalFieldName)),\n          )) &&\n        updateValue(\n          watchInternal(\n            nameRef.current as string,\n            defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n            false,\n            values,\n          ),\n        ),\n    });\n\n    return () => watchSubscription.unsubscribe();\n  }, []);\n\n  return value;\n}\n"],"names":["element","type","value","isObjectType","isNullOrUndefined","Array","isArray","Date","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","FormContext","React","createContext","displayName","useFormContext","useContext","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","Proxy","get","prop","Object","keys","length","formStateData","omit","isEmptyObject","find","window","HTMLElement","document","isWeb","useFormState","props","control","methods","formStateRef","subjectsRef","nameRef","useRef","updateFormState","useState","readFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","useEffect","formStateSubscription","state","subscribe","next","convertToArrayPayload","includes","shouldRenderFormState","unsubscribe","getProxyFormState","useController","rules","shouldUnregister","defaultValuesRef","register","fieldsRef","unregister","namesRef","shouldUnmount","inFieldArrayActionRef","isFieldArray","isNameInFieldArray","array","field","setInputStateValue","_f","onChange","onBlur","ref","controllerSubscription","data","values","shouldUnmountField","mount","event","target","isCheckBoxInput","checked","getControllerValue","elm","fieldState","invalid","isTouched","error","validateAllFieldCriteria","message","types","[object Object]","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","focus","refs","getFieldsValues","output","disabled","every","d","performance","now","c","r","Math","random","toString","keyName","map","generateId","deepEqual","object1","object2","isErrorObject","isPrimitive","isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","parentNode","parentName","deepMerge","targetValue","sourceValue","slice","append","fill","insert","from","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","options","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","getFieldValueAs","fieldsRefs","criteriaMode","isString","RegExp","getValidateError","isMessage","validationData","isRegex","async","required","maxLength","minLength","min","max","pattern","validate","inputValue","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateRef","isFunction","validateError","validationResult","validateFunction","entries","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","Subscription","this","tearDown","tearDowns","push","teardown","Subscriber","observer","subscription","add","closed","Subject","observers","subscriber","isWindowUndefined","render","Provider","children","focusNameRef","isMountedRef","getIsDirty","updateIsValid","fieldArrayDefaultValuesRef","setFields","mapIds","getFieldArrayParentName","omitKey","getCurrentFieldsValues","getFocusFieldName","shouldFocus","focusName","focusIndex","setFieldsAndNotify","fieldsValues","cleanup","batchStateUpdate","method","args","updatedFieldArrayValues","shouldSet","argA","argB","setFieldArrayDirtyFields","registerFieldArray","forEach","appendValueItem","valueIndex","inputName","watchAll","watchField","watch","startsWith","fieldArraySubscription","inputFieldArrayName","isReset","swap","useCallback","fieldValues","swapArrayAt","move","moveArrayAt","prependValue","prependAt","fillEmptyArray","appendValue","appendAt","currentIndex","remove","removeArrayAt","insertValue","insertAt","reValidateMode","resolver","context","shouldFocusError","isSubmitted","submitCount","isSubmitting","isSubmitSuccessful","resolverRef","contextRef","Set","unMount","validationMode","getValidationModes","isValidateAllFieldCriteria","isFieldWatched","has","shouldRenderBaseOnError","shouldSkipRender","inputState","isValidFromResolver","isWatched","previousError","validateForm","updatedFormState","setFieldValue","rawValue","shouldRender","shouldRegister","isHTMLElement","radioRef","selectRef","checkboxRef","shouldDirty","shouldTouch","updateTouchAndDirtyState","shouldValidate","trigger","formValues","isCurrentTouched","isChanged","previousIsDirty","isPreviousFieldDirty","isPreviousFieldTouched","executeInlineValidation","skipReRender","validateField","executeResolverValidation","getResolverOptions","shouldCheckValid","valid","fieldError","fieldNames","schemaResult","Promise","all","fieldName","updateIsValidAndInputValue","isValueUndefined","defaultChecked","setInternalValues","inputKey","handleChange","inputType","isBlurEvent","isReValidateOnBlur","isReValidateOnChange","shouldSkipValidation","skipValidation","getValues","parentNodeName","currentError","watchInternal","isGlobal","isArrayNames","delete","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","keepIsValid","registerFieldRef","isRadioOrCheckboxFunction","contains","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","registerAbsentFields","FileList","useFieldArraySubscription","isLiveInDom","useMemo","info","setValue","reset","keepStateOptions","updatedValues","keepValues","inputRef","closest","keepDefaultValues","keepSubmitCount","keepIsSubmitted","keepErrors","clearErrors","setError","setFocus","updateValue","watchSubscription"],"mappings":"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"}